[{"/home/ubuntu/dev/todo-app/frontend/src/index.tsx":"1","/home/ubuntu/dev/todo-app/frontend/src/component/todoList.tsx":"2","/home/ubuntu/dev/todo-app/frontend/src/reportWebVitals.ts":"3"},{"size":537,"mtime":1613139466253,"results":"4","hashOfConfig":"5"},{"size":5639,"mtime":1613214188667,"results":"6","hashOfConfig":"5"},{"size":425,"mtime":1612343251594,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"wt9ch3",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ubuntu/dev/todo-app/frontend/src/index.tsx",[],["16","17"],"/home/ubuntu/dev/todo-app/frontend/src/component/todoList.tsx",["18"],"import * as React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from \"axios\";\nimport \"bootstrap/dist/js/bootstrap.js\";\nimport { Trash } from \"react-bootstrap-icons\";\n\nexport interface TodoListProps {}\n\ntype Todos = {\n\tkey: string;\n\tname: string;\n\tcomplete: boolean;\n};\n\nexport interface TodoListState {\n\ttodoList: Todos[];\n\tnewTodoText: string;\n}\n\nclass TodoList extends React.Component<TodoListProps, TodoListState> {\n\tconstructor(props: TodoListProps) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttodoList: [],\n\t\t\tnewTodoText: \"\",\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.refreshList();\n\t}\n\n\tcomponentDidUpdate() {\n\t\tthis.state.todoList.map((data) => {\n\t\t\taxios.put(\n\t\t\t\t\"http://localhost:8000/api/todos/\" + data.key,\n\t\t\t\tdata\n\t\t\t).catch((err) => console.log(err));\n\t\t\treturn console.log(data.key + \" Done\");\n\t\t});\n\t}\n\n\trefreshList() {\n\t\taxios.get<Todos[]>(\"http://localhost:8000/api/todos\")\n\t\t\t.then((res) => {\n\t\t\t\tthis.setState({ todoList: res.data });\n\t\t\t})\n\t\t\t.catch((err) => console.log(err));\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='container'>\n\t\t\t\t<div className='row p-3'>\n\t\t\t\t\t<h1>Todo List</h1>\n\t\t\t\t</div>\n\t\t\t\t<div className='row m-2'>\n\t\t\t\t\t<div className='col-10'></div>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\tclassName='col-2 btn btn-primary'\n\t\t\t\t\t\tdata-bs-toggle='modal'\n\t\t\t\t\t\tdata-bs-target='#todoModal'>\n\t\t\t\t\t\tAdd\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className='row' id='todo-list'>\n\t\t\t\t\t\t{this.renderTodoList()}\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{this.newTodoModal()}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tprivate newTodoModal() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName='modal fade'\n\t\t\t\tid='todoModal'\n\t\t\t\taria-labelledby='todoModalLabel'\n\t\t\t\taria-hidden='true'>\n\t\t\t\t<div className='modal-dialog'>\n\t\t\t\t\t<div className='modal-content'>\n\t\t\t\t\t\t<div className='modal-header'>\n\t\t\t\t\t\t\t<h5\n\t\t\t\t\t\t\t\tclassName='modal-title'\n\t\t\t\t\t\t\t\tid='todoModalLabel'>\n\t\t\t\t\t\t\t\tNew Todo\n\t\t\t\t\t\t\t</h5>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\t\tclassName='btn-close'\n\t\t\t\t\t\t\t\tdata-bs-dismiss='modal'\n\t\t\t\t\t\t\t\taria-label='Close'></button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='modal-body'>\n\t\t\t\t\t\t\t{this.newTodoForm()}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='modal-footer'>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\t\tclassName='btn btn-secondary'\n\t\t\t\t\t\t\t\tdata-bs-dismiss='modal'>\n\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\t\tclassName='btn btn-primary'\n\t\t\t\t\t\t\t\tonClick={(event) => {\n\t\t\t\t\t\t\t\t\tthis.addTodo();\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tdata-bs-dismiss='modal'>\n\t\t\t\t\t\t\t\tSave\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\tprivate newTodoForm() {\n\t\treturn (\n\t\t\t<form id='new-todo-form' onSubmit={() => this.addTodo()}>\n\t\t\t\t<input\n\t\t\t\t\ttype='text'\n\t\t\t\t\tclassName='form-control'\n\t\t\t\t\tid='todoName'\n\t\t\t\t\tplaceholder='Enter Todos Description'\n\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tnewTodoText: event.target.value,\n\t\t\t\t\t\t});\n\t\t\t\t\t}}></input>\n\t\t\t</form>\n\t\t);\n\t}\n\n\tprivate deleteTodo(key: String) {\n\t\taxios.delete(\"http://localhost:8000/api/todos/\" + key)\n\t\t\t.then(() => {\n\t\t\t\tthis.refreshList();\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log(err);\n\t\t\t});\n\t}\n\n\tprivate updateTodo(keyUpdate: String, value: boolean) {\n\t\tlet newTodoList: Todos[] = new Array();\n\n\t\tthis.state.todoList.map((data) => {\n\t\t\tif (data.key === keyUpdate) {\n\t\t\t\tlet todo: Todos = data;\n\n\t\t\t\ttodo.complete = value;\n\t\t\t\tnewTodoList.push(todo);\n\t\t\t} else {\n\t\t\t\tnewTodoList.push(data);\n\t\t\t}\n\n\t\t\treturn \"Done\";\n\t\t});\n\n\t\tthis.setState({\n\t\t\ttodoList: newTodoList,\n\t\t});\n\t}\n\n\tprivate hashKey(str: string) {\n\t\tvar hash = 0,\n\t\t\ti,\n\t\t\tchr;\n\t\tfor (i = 0; i < str.length; i++) {\n\t\t\tchr = str.charCodeAt(i);\n\t\t\thash = (hash << 5) - hash + chr;\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\t\treturn hash;\n\t}\n\n\tprivate addTodo() {\n\t\tlet todo: Todos = {\n\t\t\tkey: this.hashKey(this.state.newTodoText).toString(),\n\t\t\tname: this.state.newTodoText,\n\t\t\tcomplete: false,\n\t\t};\n\n\t\taxios.post(\"http://localhost:8000/api/todos\", todo)\n\t\t\t.then(() => {\n\t\t\t\tlet formID = \"new-todo-form\";\n\t\t\t\tlet resetForm: HTMLFormElement;\n\t\t\t\tresetForm = document.getElementById(\n\t\t\t\t\tformID\n\t\t\t\t) as HTMLFormElement;\n\t\t\t\tresetForm.reset();\n\n\t\t\t\tthis.refreshList();\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log(err);\n\t\t\t});\n\t}\n\n\tprivate renderLabelDone(key: String, complete: boolean) {\n\t\tif (complete) {\n\t\t\treturn (\n\t\t\t\t<div className='form-check form-switch'>\n\t\t\t\t\t<input\n\t\t\t\t\t\tclassName='form-check-input'\n\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\tid='flexSwitchCheckDefault'\n\t\t\t\t\t\tchecked\n\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\tthis.updateTodo(key, event.target.checked);\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<label\n\t\t\t\t\t\tclassName='form-check-label text-success'\n\t\t\t\t\t\thtmlFor='flexSwitchCheckDefault'>\n\t\t\t\t\t\tDone\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div className='form-check form-switch'>\n\t\t\t\t\t<input\n\t\t\t\t\t\tclassName='form-check-input'\n\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\tid='flexSwitchCheckDefault'\n\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\tthis.updateTodo(key, event.target.checked);\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<label\n\t\t\t\t\t\tclassName='form-check-label text-danger'\n\t\t\t\t\t\thtmlFor='flexSwitchCheckDefault'>\n\t\t\t\t\t\tDone\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate renderTodoList() {\n\t\tconsole.log(this.state);\n\t\treturn this.state.todoList.map((data) => {\n\t\t\treturn (\n\t\t\t\t<div\n\t\t\t\t\tclassName='row border border-2 border-primary rounded m-3 p-3'\n\t\t\t\t\tkey={data.key}>\n\t\t\t\t\t<div className='col-9'>{data.name}</div>\n\t\t\t\t\t<div className='col-2 '>\n\t\t\t\t\t\t{this.renderLabelDone(data.key, data.complete)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='col-1 btn btn-danger'\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tthis.deleteTodo(data.key);\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t<Trash />\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t);\n\t\t});\n\t}\n}\n\nexport default TodoList;\n","/home/ubuntu/dev/todo-app/frontend/src/reportWebVitals.ts",[],{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":150,"column":30,"nodeType":"25","messageId":"26","endLine":150,"endColumn":41,"fix":"27"},"no-native-reassign",["28"],"no-negated-in-lhs",["29"],"@typescript-eslint/no-array-constructor","The array literal notation [] is preferable.","NewExpression","useLiteral",{"range":"30","text":"31"},"no-global-assign","no-unsafe-negation",[3167,3178],"[]"]